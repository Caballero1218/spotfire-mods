[{"body":"A step-by-step tutorial on using Spotfire Mods We will be using Spotfire API and Google Charts to create a basic bar chart.\nThis tutorial will cover the following:\n Initial setup Consuming and visualizing data Selection/marking Theme-ing Controlling the mod using popout Export to PDF  The full code of the result from this tutorial project ('js-dev-barchart-googlecharts'), as well as the starter project used in the tutorial ('js-dev-starter'), can be found among the example projects.\nThe full version of the resulting example project covers some additional cases that are outside the scope of this tutorial.\nPrerequisites  A running instance of Spotfire A code editor. It is highly recommended to use Visual Studio Code when developing a mod. The mod example includes predefined settings for VS Code that enable a default build task, intellisense in the mod manifest and intellisense in the JavaScript code. node.js installed   1. Initial setup  Copy the js-dev-starter project and rename it to something relevant, like my-barchart-mod. The starter project includes a minimum amount of code for a working mod. Open the manifest.json file found in src folder and set the id field to my-barchart-mod. Open the folder in a terminal or command line. Run npm install to install dependencies. Run npm run server to start the server. The provided server setup allows you to see live updates when developing a mod. In Spotfire go to Tools \u0026gt; Development \u0026gt; Create visualization mod and connect to the project by following the on-screen steps (Connect to Project \u0026gt; Development server \u0026gt; Connect) You should see some mod metadata on the screen, which means the mod is working.   2. Add Google Charts library  We will be using this google example Add google chart loader script to index.html (before main.js script)  \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;mod-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script id=\u0026#34;spotfire-loader\u0026#34;\u0026gt;var Spotfire=function(e){\u0026#34;use strict\u0026#34;;return e.initialize=function(e){var t=\u0026#34;sfTemp\u0026#34;+1e4*Math.random()+\u0026#34;Cb\u0026#34;,a=window;a[t]=e;var r={subject:\u0026#34;GetUrl\u0026#34;,callbackId:-1,...\u0026lt;/script\u0026gt; + \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://www.gstatic.com/charts/loader.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  \u0026lt;script src=\u0026#34;main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Add the gstatic domain name as an external resource in mod-manifest.json. External resources from unknown domains will be blocked from loading for security reasons.  \u0026#34;files\u0026#34;: [ \u0026#34;index.html\u0026#34;, \u0026#34;main.css\u0026#34;, \u0026#34;main.js\u0026#34; - ] + ], + \u0026#34;externalResources\u0026#34;: [\u0026#34;https://www.gstatic.com/\u0026#34;]  Paste full example code into main.js inside render function  async function render(dataView, windowSize, prop) { /** * Check the data view for errors */ let errors = await dataView.getErrors(); if (errors.length \u0026gt; 0) { // Showing an error overlay will hide the mod iframe. // Clear the mod content here to avoid flickering effect of // an old configuration when next valid data view is received. mod.controls.errorOverlay.show(errors); return; } mod.controls.errorOverlay.hide(); /** * Get rows from dataView */ const rows = await dataView.allRows(); if (rows == null) { // User interaction caused the data view to expire. // Don\u0026#39;t clear the mod content here to avoid flickering. return; } - /** - * Print out to document - */ - const container = document.querySelector(\u0026#34;#mod-container\u0026#34;); - container.textContent = `windowSize: ${windowSize.width}x${windowSize.height}\\r\\n`; - container.textContent += `should render: ${rows.length} rows\\r\\n`; - container.textContent += `${prop.name}: ${prop.value()}`; - - /** - * Signal that the mod is ready for export. - */ - context.signalRenderComplete();  + google.charts.load(\u0026#34;current\u0026#34;, { packages: [\u0026#34;corechart\u0026#34;] }); + google.charts.setOnLoadCallback(drawChart); + function drawChart() { + var data = google.visualization.arrayToDataTable([ + [\u0026#34;Element\u0026#34;, \u0026#34;Density\u0026#34;, { role: \u0026#34;style\u0026#34; }], + [\u0026#34;Copper\u0026#34;, 8.94, \u0026#34;#b87333\u0026#34;], + [\u0026#34;Silver\u0026#34;, 10.49, \u0026#34;silver\u0026#34;], + [\u0026#34;Gold\u0026#34;, 19.3, \u0026#34;gold\u0026#34;], + [\u0026#34;Platinum\u0026#34;, 21.45, \u0026#34;color: #e5e4e2\u0026#34;] + ]); + + var view = new google.visualization.DataView(data); + view.setColumns([0, 1, { calc: \u0026#34;stringify\u0026#34;, sourceColumn: 1, type: \u0026#34;string\u0026#34;, role: \u0026#34;annotation\u0026#34; }, 2]); + + var options = { + title: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;, + width: 600, + height: 400, + bar: { groupWidth: \u0026#34;95%\u0026#34; }, + legend: { position: \u0026#34;none\u0026#34; }, + }; + var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;barchart_values\u0026#34;)); + chart.draw(view, options); + }  } });  Update the bar chart container id (in index.html our container id is mod-container)  var options = { title: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;, width: 600, height: 400, bar: { groupWidth: \u0026#34;95%\u0026#34; }, legend: { position: \u0026#34;none\u0026#34; }, }; - var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;barchart_values\u0026#34;)); + var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));  chart.draw(view, options);  Save the changes. You should see the example working in Spotfire.   Make use of async/await to get rid of extra code. Make the chart fit the screen by providing a chart area with some predefined margins. Get rid of chart title.  - google.charts.load(\u0026#34;current\u0026#34;, { packages: [\u0026#34;corechart\u0026#34;] }); - google.charts.setOnLoadCallback(drawChart);  - function drawChart() { + await google.charts.load(\u0026#34;current\u0026#34;, { packages: [\u0026#34;corechart\u0026#34;] });  var data = google.visualization.arrayToDataTable([ [\u0026#34;Element\u0026#34;, \u0026#34;Density\u0026#34;, { role: \u0026#34;style\u0026#34; }], [\u0026#34;Copper\u0026#34;, 8.94, \u0026#34;#b87333\u0026#34;], [\u0026#34;Silver\u0026#34;, 10.49, \u0026#34;silver\u0026#34;], [\u0026#34;Gold\u0026#34;, 19.3, \u0026#34;gold\u0026#34;], [\u0026#34;Platinum\u0026#34;, 21.45, \u0026#34;color: #e5e4e2\u0026#34;] ]); var view = new google.visualization.DataView(data); view.setColumns([0, 1, { calc: \u0026#34;stringify\u0026#34;, sourceColumn: 1, type: \u0026#34;string\u0026#34;, role: \u0026#34;annotation\u0026#34; }, 2]); var options = { - title: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;, - width: 600, - height: 400,  bar: { groupWidth: \u0026#34;95%\u0026#34; }, legend: { position: \u0026#34;none\u0026#34; }, + chartArea: { left: 85, top: 20, right: 10, bottom: 40 }  }; var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;)); chart.draw(view, options); } - }  3. Consume Spotfire data  We create hierarchies for X and Color dimensions. These are defined in the manifest and should not be confused with actual color values (css-color from now on to avoid confusion). We then use this grouped data to extract column names, values and css-colors. A google visualization expects data to be in the following format (and complains if it\u0026rsquo;s not):     SeriesNames Series1 Style Series2 Style Series3 Style     Category1 Value11 CssColor11 Value12 CssColor12 Value13 CssColor13   Category2 Value21 CssColor21 Value22 CssColor22 Value23 CssColor23     We loop over X hierarchy to create the data table by filling a row with null values first, and then populating it with existing values at proper positions.  - var data = google.visualization.arrayToDataTable([ - [\u0026#34;Element\u0026#34;, \u0026#34;Density\u0026#34;, { role: \u0026#34;style\u0026#34; }], - [\u0026#34;Copper\u0026#34;, 8.94, \u0026#34;#b87333\u0026#34;], - [\u0026#34;Silver\u0026#34;, 10.49, \u0026#34;silver\u0026#34;], - [\u0026#34;Gold\u0026#34;, 19.3, \u0026#34;gold\u0026#34;], - [\u0026#34;Platinum\u0026#34;, 21.45, \u0026#34;color: #e5e4e2\u0026#34;] - ]);  - var view = new google.visualization.DataView(data); - view.setColumns([0, 1, { calc: \u0026#34;stringify\u0026#34;, sourceColumn: 1, type: \u0026#34;string\u0026#34;, role: \u0026#34;annotation\u0026#34; }, 2]);  + const colorHierarchy = await dataView.hierarchy(\u0026#34;Color\u0026#34;); + const colorLeafNodes = (await colorHierarchy.root()).leaves(); + const colorDomain = colorHierarchy.isEmpty ? [\u0026#34;All Values\u0026#34;] : colorLeafNodes.map((node) =\u0026gt; node.formattedPath());  + const xHierarchy = await dataView.hierarchy(\u0026#34;X\u0026#34;); + const xLeafNodes = (await xHierarchy.root()).leaves(); + const xDomain = xLeafNodes.map(node =\u0026gt; node.formattedValue());  + const dataColumns = [\u0026#34;Columns\u0026#34;]; + colorDomain.forEach(value =\u0026gt; dataColumns.push(value, { role: \u0026#34;style\u0026#34; })); + + const dataRows = []; + xLeafNodes.forEach( + (node) =\u0026gt; { + let valueAndColorPairs = new Array(colorLeafNodes.length).fill([0, \u0026#34;\u0026#34;]).flat() + node.rows().forEach((r) =\u0026gt; { + let colorIndex = !colorHierarchy.isEmpty ? r.categorical(\u0026#34;Color\u0026#34;).leafIndex : 0; + let yValue = r.continuous(\u0026#34;Y\u0026#34;).value(); + valueAndColorPairs[colorIndex * 2] = yValue; + valueAndColorPairs[colorIndex * 2 + 1] = r.color().hexCode; + }); + const dataRow = [node.formattedPath(), valueAndColorPairs].flat(); + dataRows.push(dataRow) + } + ); + + var data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);  var options = { bar: { groupWidth: \u0026#34;95%\u0026#34; }, legend: { position: \u0026#34;none\u0026#34; }, chartArea: { left: 85, top: 20, right: 10, bottom: 40 } }; var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;)); - chart.draw(view, options); + chart.draw(data, options);  Not all combinations of X and Color domains will be renderable by google charts out of the box, without special treatment. We will guard against this with a try/catch block. The full code of the js-dev-barchart-googlecharts example project goes a little bit more in depth than this tutorial and covers some additional cases  - var data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]); + let data; + try { + data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]); + } catch (e) { + console.log(e); + }  4. Selection/marking  Add selection/marking logic. We listen for \u0026ldquo;select\u0026rdquo; event and extract X and Color values (not css-color!) by index in their respective domains. The Color index is halved because we have 2 times as many columns due to styling being applied (see table above). We loop over the rows array and mark the rows that match our selection. An obvious optimization would be to store the rows as a hash map to eliminate redundancy.  var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;)); chart.draw(data, options); + google.visualization.events.addListener(chart, \u0026#34;select\u0026#34;, () =\u0026gt; { + const selection = chart.getSelection()[0]; + + if (!selection) return; + const { row, column } = selection; + const xIndex = row; + const colorIndex = (column - 1) / 2; + + selectRow({ xIndex, colorIndex }); + }); + + function selectRow({ xIndex, colorIndex }) { + rows.forEach((row) =\u0026gt; { + var rowColorIndex = !colorHierarchy.isEmpty ? row.categorical(\u0026#34;Color\u0026#34;).leafIndex : 0; + var rowXIndex = !xHierarchy.isEmpty ? row.categorical(\u0026#34;X\u0026#34;).leafIndex : 0; + if (rowXIndex == xIndex \u0026amp;\u0026amp; rowColorIndex == colorIndex) { + row.mark(); + } + }); + }  }  To clear all marking on background click, as native Spotfire visualizations do, we listen for \u0026ldquo;click\u0026rdquo; event and check its target id.  function selectRow({ x, color }) { rows.forEach(row =\u0026gt; { if (row.get(\u0026#34;X\u0026#34;).getValue() == x \u0026amp;\u0026amp; row.get(\u0026#34;Color\u0026#34;).getValue() == color) { row.mark(); } }); } + + google.visualization.events.addListener(chart, \u0026#34;click\u0026#34;, ({ targetID, x, y }) =\u0026gt; { + if (targetID == \u0026#34;chartarea\u0026#34;) { + dataView.clearMarking(); + return; + } + });  } });  5. Controlling the mod using the popout  We would like to control the chart\u0026rsquo;s orientation (horizontal/vertical) and stacking (side-by-side/stacked). The mods api allows us to do this via a popout menu. First, we add them as properties to the manifest.  \u0026#34;icon\u0026#34;: \u0026#34;icon.svg\u0026#34;, \u0026#34;properties\u0026#34;: [ { - \u0026#34;name\u0026#34;: \u0026#34;myProperty\u0026#34;, + \u0026#34;name\u0026#34;: \u0026#34;orientation\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, - \u0026#34;defaultValue\u0026#34;: \u0026#34;myValue\u0026#34; + \u0026#34;defaultValue\u0026#34;: \u0026#34;vertical\u0026#34; + }, + { + \u0026#34;name\u0026#34;: \u0026#34;stacking\u0026#34;, + \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, + \u0026#34;defaultValue\u0026#34;: \u0026#34;side-by-side\u0026#34;  } ],   Then we add the new properties to the read loop and pass them down to the render function.\n  Since the manifest has changed, we will need to reconnect the development server to Spotfire for the changes to take effect (\u0026ldquo;Properties\u0026rdquo; icon (puzzle piece) in the upper right of the mod screen \u0026gt; Disconnect \u0026gt; Connect)\n  /** * Create the read function. */ - const reader = mod.createReader(mod.visualization.data(), mod.windowSize(), mod.property(\u0026#34;myProperty\u0026#34;)); + const reader = mod.createReader( + mod.visualization.data(), + mod.windowSize(), + mod.property(\u0026#34;orientation\u0026#34;), + mod.property(\u0026#34;stacking\u0026#34;) + );  /** * Initiate the read loop */ reader.subscribe(render); /** * @param {Spotfire.DataView} dataView * @param {Spotfire.Size} windowSize - * @param {Spotfire.ModProperty\u0026lt;string\u0026gt;} prop + * @param {Spotfire.ModProperty\u0026lt;string\u0026gt;} orientation + * @param {Spotfire.ModProperty\u0026lt;string\u0026gt;} stacking  */ - async function render(dataView, windowSize, prop) { + async function render(dataView, windowSize, orientation, stacking) {  Update the background click callback to show a test popout.  google.visualization.events.addListener(chart, \u0026#34;click\u0026#34;, ({ targetID, x, y }) =\u0026gt; { if (targetID == \u0026#34;chartarea\u0026#34;) { dataView.clearMarking(); + showPopout({ x, y });  return; } }); + const { popout } = mod.controls; + function showPopout(e) { + popout.show( + { + x: e.x, + y: e.y, + autoClose: true, + alignment: \u0026#34;Bottom\u0026#34;, + onChange: popoutChangeHandler + }, + popoutContent + ); + } + + const { section } = popout; + const { button } = popout.components; + const popoutContent = () =\u0026gt; [ + section({ heading: \u0026#34;I\u0026#39;m a popout!\u0026#34;, children: [button({ text: \u0026#34;I\u0026#39;m a button\u0026#34;, name: \u0026#34;button\u0026#34; })] }) + ]; + + function popoutChangeHandler() {}  } });  Add a tiny helper function to check property value. On each render we check stacking and orientation properties and update the chart configuration accordingly. Stacking is a simple boolean but orientation requires different classes for horizontal and vertical types of charts.  + const is = property =\u0026gt; value =\u0026gt; property.value() == value; +  var options = { bar: { groupWidth: \u0026#34;95%\u0026#34; }, legend: { position: \u0026#34;none\u0026#34; }, - chartArea: { left: 85, top: 20, right: 10, bottom: 40 } + chartArea: { left: 85, top: 20, right: 10, bottom: 40 }, + isStacked: is(stacking)(\u0026#34;stacked\u0026#34;)  }; - var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;)); + + const container = document.querySelector(\u0026#34;#mod-container\u0026#34;); + let chart; + if (is(orientation)(\u0026#34;horizontal\u0026#34;)) { + chart = new google.visualization.BarChart(container); + } else { + chart = new google.visualization.ColumnChart(container); + } +  chart.draw(data, options);  To mimic native Spotfire bar chart behavior, we show a popout on X-axis click (Y-axis for horizontal orientation).  google.visualization.events.addListener(chart, \u0026#34;click\u0026#34;, ({ targetID, x, y }) =\u0026gt; { if (targetID == \u0026#34;chartarea\u0026#34;) { dataView.clearMarking(); - showPopout({ x, y });  return; } + + if (is(orientation)(\u0026#34;vertical\u0026#34;) \u0026amp;\u0026amp; targetID.indexOf(\u0026#34;hAxis\u0026#34;) != -1) { + showPopout({ x, y }); + return; + } + + if (is(orientation)(\u0026#34;horizontal\u0026#34;) \u0026amp;\u0026amp; targetID.indexOf(\u0026#34;vAxis\u0026#34;) != -1) { + showPopout({ x, y }); + return; + }  });  Create popout content from the available components. Listen for popout changes and update property values. This will trigger a re-render and add an undoable step to the native Undo stack.  const { section } = popout; - const { button } = popout.components; - const popoutContent = () =\u0026gt; [ - section({ heading: \u0026#34;I\u0026#39;m a popout!\u0026#34;, children: [button({ text: \u0026#34;I\u0026#39;m a button\u0026#34;, name: \u0026#34;button\u0026#34; })] }) - ];  + const { radioButton } = popout.components; + const popoutContent = () =\u0026gt; [ + section({ + heading: \u0026#34;Chart Type\u0026#34;, + children: [ + radioButton({ + name: stacking.name, + text: \u0026#34;Stacked bars\u0026#34;, + value: \u0026#34;stacked\u0026#34;, + checked: is(stacking)(\u0026#34;stacked\u0026#34;) + }), + radioButton({ + name: stacking.name, + text: \u0026#34;Side-by-side bars\u0026#34;, + value: \u0026#34;side-by-side\u0026#34;, + checked: is(stacking)(\u0026#34;side-by-side\u0026#34;) + }) + ] + }), + section({ + heading: \u0026#34;Orientation\u0026#34;, + children: [ + radioButton({ + name: orientation.name, + text: \u0026#34;Vertical\u0026#34;, + value: \u0026#34;vertical\u0026#34;, + checked: is(orientation)(\u0026#34;vertical\u0026#34;) + }), + radioButton({ + name: orientation.name, + text: \u0026#34;Horizontal\u0026#34;, + value: \u0026#34;horizontal\u0026#34;, + checked: is(orientation)(\u0026#34;horizontal\u0026#34;) + }) + ] + }) + ];  - function popoutChangeHandler() {} + function popoutChangeHandler({ name, value }) { + name == orientation.name \u0026amp;\u0026amp; orientation.set(value); + name == stacking.name \u0026amp;\u0026amp; stacking.set(value); + }   Lastly, add a pointer cursor to svg text rule in main.css to signal an interactive element.  html, body, #mod-container { margin: 0; height: 100%; overflow: hidden; } + +svg text { + cursor: pointer; +}  6. Use Spotfire theme and styling  Extract style info from context Update Options object  + const context = mod.getRenderContext(); + const styling = context.styling; + const textStyle = { + fontSize: styling.scales.font.fontSize, + fontName: styling.scales.font.fontFamily, + color: styling.scales.font.color + }; + + const baselineColor = styling.scales.line.stroke; + const gridlines = { color: \u0026#34;transparent\u0026#34; };  - var options = { - bar: { groupWidth: \u0026#34;95%\u0026#34; }, + const options = { + bar: { groupWidth: \u0026#34;80%\u0026#34; }, + backgroundColor: { fill: \u0026#34;transparent\u0026#34; },  legend: { position: \u0026#34;none\u0026#34; }, chartArea: { left: 85, top: 20, right: 10, bottom: 40 }, - isStacked: is(stacking)(\u0026#34;stacked\u0026#34;) + isStacked: is(stacking)(\u0026#34;stacked\u0026#34;), + hAxis: { + textStyle, + baselineColor, + gridlines + }, + vAxis: { + textStyle, + baselineColor, + gridlines, + minValue: 0 + }  };  In Spotfire, change Visualizations Theme to Dark (Visualizations \u0026gt; Canvas styling \u0026gt; Dark). You should see colors change according to theme.   7. Prepare for export  For export to work, we need to let Spotfire know when rendering is complete.  function popoutChangeHandler({ name, value }) { name == orientation.name \u0026amp;\u0026amp; orientation.set(value); name == stacking.name \u0026amp;\u0026amp; stacking.set(value); } + google.visualization.events.addListener(chart, \u0026#34;ready\u0026#34;, () =\u0026gt; context.signalRenderComplete());  Go to File \u0026gt; Export \u0026gt; Visualization to PDF to test the export feature  ","excerpt":"A step-by-step tutorial on using Spotfire Mods We will be using Spotfire API and Google Charts to …","ref":"/spotfire-mods/docs/tutorials/barchart-googlechart/","title":"Bar chart mod using Google Charts"},{"body":"Developing a visualization mod Spotfire® Mods is a framework to create interactive visualizations in TIBCO Spotfire®. It is based on web technologies and it runs in a sandboxed iframe.\nPrerequisites   A running instance of Spotfire.\nThis is needed to develop and test a mod. Development can be done against the installed client (TIBCO Spotfire® Analyst) or the web client (TIBCO Spotfire® Business Author) using the Google Chrome web browser. See Development in the Spotfire web client below for more details.\n  A code editor.\nIt is highly recommended to use Microsoft Visual Studio Code (VS Code) when developing a mod. The instructions in this document assume that VS Code is used as code editor. The mod example projects that are available for developers, include predefined settings for VS Code that enable a default build task, IntelliSense in the mod manifest, and IntelliSense in the JavaScript code.\n  Node.js installed.\nTo enable live updates when developing a mod, a set of tools based on Node.js is needed. The mod example specifies a set of development dependencies in its package.json file. These are installed when executing npm install in the same directory as the package.json file. The install script is also executed as part of the default build task in VS Code.\n  Note: When you obtain third-party software or services, it is your responsibility to ensure you understand the license terms associated with such third-party software or services and comply with such terms. \nGetting started 1. Create an empty visualization mod in Spotfire Open Spotfire and load some data. Go to Tools \u0026gt; Development \u0026gt; Create visualization mod. This will create an empty mod.\n2. Start from a mod example Click here to access the example mod projects to start the development from. Extract the zip archive locally. The extracted zip archive contains examples of mods, using the mod API in different ways.\n js-dev-barchart\nTo get familiar with mod development, start with this example containing a simple bar chart. This is the example that will be used in the following sections of this getting started guide. js-dev-starter\nThis example can be used as a starting point for any new mod. js-dev-starter-ie11\nThis example can be used as a starting point for any new mod that is also compatible with the IE11 browser. js-dev-barchart-googlecharts\nThis example is a basic bar chart that is built using the Google Charts library. The tutorial covers the steps taken to create this bar chart from scratch. ts-dev-gauge-googlecharts\nThis is an example of a gauge visualization that is developed in TypeScript using the Google Charts library and bundled with Rollup. js-areachart-d3\nThis is a more complex example built using the D3 library, where you can see how the API can be used to take advantage of a lot of features in Spotfire.  Each example contains a README file with detailed instructions specific to the example.\n3. Start local development server To use the js-dev-barchart example, open the js-dev-barchart folder in VS Code. Select Terminal \u0026gt; Run Build Task. This will install necessary development dependencies and start a local web server (the task is defined in the .vscode settings folder). The task launches a URL to the mod manifest in your web browser.\nIf you are not using the VS Code editor you can start the development server by navigating to the js-dev-barchart folder in a command line tool. The first time you are building this example, type npm install and press Enter. This will install necessary development dependencies. Skip this step on any subsequent builds. Type npm run server and press Enter. This will start a local web server and open the mod manifest in your web browser.\n4. Connect Spotfire to the development server Switch over to Spotfire and click the Connect to project button. In the pop-up that opens, click Development server. Make sure the displayed URL matches the launched URL in your browser, and then click the Connect button. This will make Spotfire navigate to your local server and serve files from your src folder.\nIf a visualization appears, it means that Spotfire has successfully connected to the development server.\n5. Start editing your example Now switch over to VS Code to start editing the mod implementation.\nThe src folder includes HTML, CSS and JavaScript files that together form the mod implementation. It also contains a mod-manifest.json file that contains metadata about the mod. If any .html/css/js file in the src folder is changed while the development server is running, the mod will be reloaded in Spotfire.\nAs an example, open the main.css file and try to change the background property of body. As soon as the css file is saved, the change will appear in Spotfire.\nFor information about how the Spotfire Mod API is accessed, open the main.js file.\nMod example folder structure The following files and folders are part of the example:\n   File Description     .vscode Settings for VS Code.   spotfire Files related to the mod API.   src Folder for the mod\u0026rsquo;s source code.   development-server.js A node.js script that starts a development server.   package.json Lists the Node.js dependencies and necessary scripts.   prettier.config.js Configuration file for formatting with the tool prettier.   README.md Instructions on how to get started.   tsconfig.json TypeScript project file. It links the /spotfire/spotfire-api.dts file for IntelliSense in your code.    The mod-manifest.json file All metadata that concerns the mod is defined in a file called mod-manifest.json. It is used to give the mod a name and an id, and to define axes and their placement. It is also used to list all files used by the mod. Only files listed in the ‘files’ property will be embedded by Spotfire.\nFor changes in the manifest to take effect, the manifest must be reloaded manually in Spotfire. Click the puzzle icon on the title bar of the visualization mod, and then click the Reload manifest button in the popup that opens.\nDebugging The mod can be debugged via the Developer tools in Spotfire. These tools are the same as the tools used by Chrome. To access the Developer tools, use the following keyboard commands. In Spotfire® Analyst: Ctrl+Alt+Shift+F12 In Spotfire® Business Author: F12\nTo find the main.js file, use the Open file command (Ctrl+P) and type the file\u0026rsquo;s name. In the opened file, it is possible to set breakpoints. It is also possible to execute code in the console. More information about Chrome DevTools can be found here: https://developers.google.com/web/tools/chrome-devtools\nDevelopment in the Spotfire web client The required browser when developing mods against the web client is Google Chrome. This is due to how browsers behave with regards to loading http content from a https context. The development server is serving files from http://127.0.0.1:8090, which according to the W3C specification is a potentially trustworthy origin. Currently only Chrome behaves correctly with regards to this. Other browser vendors are implementing support for this and might work in the future.\nNote also that when developing a mod in the web client, it is only possible to develop via a development server. Web browsers lack the file access that is needed to read files from a mod-manifest, which means that the Browse button will not be available in the web client.\nEmbedding the mod and saving to the library When the development is done, disconnect from the server to embed the mod in the analysis. Saving the mod to the Spotfire library When your mod has been embedded in the analysis, you can share the mod with others by saving it to the library.\n Click the puzzle icon in the title bar to open the development popup. Click Save to library. In the dialog that opens, navigate to the folder where you want to save the mod, and click Save. When the mod has been saved to the library, it is possible for others, connected to the same library, to use your mod in their analyses. The mod can also be pinned to the visualization flyout.  FAQ How do I use types in JavaScript files? Even though JavaScript lacks type support, it is possible to get a long way with the help of JSDoc comments. The TypeScript language service in Visual Studio Code can parse JSDoc type comments and provide IntelliSense when using the Spotfire mods API. The following snippet defines the variable dataView as an instance of Spotfire.DataView.\n/** @type {Spotfire.DataView} */ let dataView; This can be useful in cases where the API allows generic types, such as a continuous value:\n/**@type {Spotfire.DataViewContinuousValue\u0026lt;number\u0026gt;} */ let y = row.continuous(\u0026#34;Y\u0026#34;); The same would have been done in TypeScript like this:\nlet y = row.continuous\u0026lt;number\u0026gt;(\u0026#34;Y\u0026#34;); Why don’t changes to the mod-manifest.json file take effect in my analysis? The manifest is used by Spotfire to generate the underlying model for the mod. The model is generated each time the manifest is read by Spotfire. Spotfire only reads the mod manifest when the development server is connected, disconnected or when the Reload manifest button is clicked.\nWhen the development server is in a connected state, Spotfire points the mod iframe\u0026rsquo;s source directly against the development server. Any UI changes seen while the server is connected are not stored in the Spotfire document. To save the current state of the mod in the document, reload the mod manifest manually.\nSolution: Reload the manifest via the development popup.\nWhy can\u0026rsquo;t I make an ajax call to read an embedded resource? A mod is executed inside a sandboxed iframe. A sandboxed iframe sets the origin header to \u0026lsquo;null\u0026rsquo; for any ajax request. This means that the server must be configured to handle Cross-Origin Resource Sharing (CORS). The server should allow 'null' or * in order to serve a request made from a mod. The Spotfire runtime does not accept CORS requests and will therefore not serve any request made from a mod, even though it might be for an embedded resource in the mod itself.\nLinked scripts, images and CSS files do not rely on CORS to function and can be linked to. Font files rely on CORS and can therefore not be linked to. To get a font working inside the mod a data uri can be used.\nWhy is an external resource not loading correctly due to a content security policy? Mods are covered by a strict content security policy by default. The mod is only allowed to load embedded resources and any external resource request is blocked. A mod can declare a set of external resources in the mod-manifest.json to unblock these resources from being loaded.\nNote: A visualization mod with external resources cannot be exported using the web client.\nWhy doesn’t live reload work? If the live reload feature does not work when using the development server, try disabling the network cache in the Chrome Developer tools. Open Chrome developer tools (Ctrl+Shift+I) and go to the Network tab, then select the Disable cache checkbox.\n","excerpt":"Developing a visualization mod Spotfire® Mods is a framework to create interactive visualizations in …","ref":"/spotfire-mods/docs/introduction/getting-started/","title":"Getting started"},{"body":"","excerpt":"","ref":"/spotfire-mods/docs/introduction/","title":"Introduction"},{"body":"","excerpt":"","ref":"/spotfire-mods/docs/tutorials/","title":"Tutorials"},{"body":"About SVG icons What is an SVG icon? SVG stands for Scalable Vector Graphics, and is an open standard XML-based vector image format. SVG images can be created and edited with any text editor, as well as with drawing software. All major modern web browsers have SVG rendering support.\nHow do I create an SVG for my mod? There are a number of ways to create SVG icons; either you can create them in a web-based SVG editor, using a licensed program on your computer, or using a web-based design program.\nOne easy way to make an SVG icon is to use a web-based SVG editor, where you can create the icon directly in the web browser. Two examples of web-based editors are: https://editor.method.ac/ and https://vectr.com/\nYou can also use installed programs on your computer, such as Adobe Illustrator, Sketch, or Adobe XD. However, use of such programs might require previous knowledge to be efficient.\nFigma is another alternative. This is a web-based resource to create digital design, and has a free for all license. A tutorial on how to create your own visualization mod icon using Figma can be found below.\nSpecifications for the Spotfire Visualization icons Sizes of SVG icons in Spotfire The main container of SVG icons is called a viewbox. The preferred size to create an SVG icon for a visualization mod is 24x24 px. This icon is then scaled up to 32x32 px and down to 16x16 px depending on where in the UI it is placed. See examples below.\nExamples in use within Spotfire:\nColors Spotfire visualizations have icons with three distinct colors. For a consistent style, it is recommended that you use the same pattern.\nOpacity In order to add tinted areas, you can use opacity, as seen in the example below.\nHow to create your visualization mod icon using Figma This guide describes how to create your icon in Figma. Figma is an interface design application that runs in the browser. It has a free-for-all licence and all you will need is an email account. Read more and download Figma here:\nhttps://www.figma.com/\nBelow is a tutorial on how to create an SVG icon for a donut chart.\nStep 1:\nDownload the template file to begin:\nStep 2:\nFollow the tutorial to create your icon:\nClick here for a video tutorial on how to create an SVG icon for your visualization mod.\n","excerpt":"About SVG icons What is an SVG icon? SVG stands for Scalable Vector Graphics, and is an open …","ref":"/spotfire-mods/docs/tutorials/mod-icons/","title":"Creating SVG icons for Spotfire visualization mods"},{"body":"Data view definition A mod can create a single aggregated data view.\nThe data view is declared in the mod manifest. Its contents is specified as a number of axes. The Spotfire UI will provide controls to set actual columns/expressions used to build the data view in runtime.\nIn the simplest form, the data view definition part of a mod manifest could look like this.\n\u0026quot;dataViewDefinition\u0026quot;: { \u0026quot;axes\u0026quot;: [ {\r\u0026quot;name\u0026quot;: \u0026quot;Y\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;continuous\u0026quot; } ] }\r This specifies that the mod will have a single continuous axis called Y, that will compute a single aggregated value, e.g. Sum(Sales). Continuous axes are typically rendered on a continuous scale.\nThe \u0026ldquo;mode\u0026rdquo; parameter can be \u0026ldquo;continuous\u0026rdquo;, \u0026ldquo;categorical\u0026rdquo; or \u0026ldquo;dual\u0026rdquo;. Dual means that the axis supports both continuous and categorical mode and can be switched between them.\nA categorical axis always splits the aggregation. The columns/expressions on the axes are used in the group by clause in the aggregated query generated for the visualization. Categorical axes are typically rendered on a categorical, or discrete, scale.\nIf we continue the example above we could add a categorical x axis to the visualization.\n\u0026quot;dataViewDefinition\u0026quot;: { \u0026quot;axes\u0026quot;: [ {\r\u0026quot;name\u0026quot;: \u0026quot;X\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;categorical\u0026quot;, },\r{\r\u0026quot;name\u0026quot;: \u0026quot;Y\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;continuous\u0026quot;, }\r] }\r That could be rendered like this:\nIt is always possible to add more columns to the expression on a categorical axis. This will split the aggregation further, and Spotfire usually renders this as a hierarchy.\nConsuming data from JavaScript The data view object On the javascript side data is retrieved via a DataView object. The data view has methods for retrieving data rows and information about the current axes that has data mapped to them. The methods on the data view are asynchronous so you need to await their result.\nThere are two different ways to retrieve the values for Depending on what type of axis is being queried\nThere are methods available to retrieve the value for an axis in a data row based on the type of that axis. These are continuous for continuous axes and categorical for categorical axes\nThere are two methods available to retrieve the value for an axis in a data row. Depending on the mode of the axis that is being queried there is a continuous method for continous axes and a categorical method for categorical axes. So, assuming that the Y axis is continuous, you would do the following to get its value:\nlet yValue = row.continuous(\u0026quot;Y\u0026quot;);\r The value retrieved by these methods can be of two types depending on which one is called. Either it is a DataViewContinuousValue, or it is a DataViewCategoricalValue. To list all values of a data view in csv like format, you could do this:\nasync function logDataView(dataView)\r{\r// Print axes names\rconst axes = await dataView.axes();\rconsole.log(axes.map(axis =\u0026gt; axis.name).join(\u0026quot;,\u0026quot;));\r// Print the row values.\rconst rows = await dataView.allRows();\rrows.forEach(row =\u0026gt; {\rconsole.log(axes.map(axis =\u0026gt; {\rif(axis.isCategorical){\rreturn row.categorical(axis.name).fullName()\r} return row.continuous(axis.name).value()\r}).join(\u0026quot;,\u0026quot;));\r});\r}\r For the simple bar chart above showing sales per fruit, the output would be:\nX,Y\rApples,16000\rOranges,31000  DataViewContinuousValue and DataViewCategoricalValue A DataViewContinuousValue is a simple object with methods to retrieve the actual value (value), and to get a string representation of it (formattedValue).\nA DataViewCategoricalValue on the other hand is a bit more complicated. Since categorical axes form hierarchies, each DataViewCategoricalValue is made up from parts describing the path in the hierarchy. However, a Mod developer may choose to ignore this and treat the whole path as a single value as seen in the simple code example above. For the third bar chart example above, the output from the logDataView function would be:\nX,Y\rApples \u0026gt;\u0026gt; Spain,2500\rApples \u0026gt;\u0026gt; USA,13500\rOranges \u0026gt;\u0026gt; Spain,12000\rOranges \u0026gt;\u0026gt; USA,19000\r If, on the other hand, you want to access all parts of the path this can be done via the path property that returns an array of DataViewCategoricalValuePathElement objects. There is also a leafIndex property, which is the index of this value among the leaves in the hierarchy generated for the axis. This leads us to the next subject.\nHierarchies Another way to access the data in the data view is to go via hierarchies. These are represented by DataViewHierarchy objects that can be retrieved for all categorical axes. Either via the hierarchy property on the axis you get via getAxis, or via the hierarchy function on the data view.\nThe hierarchy is a tree structure with some metadata about the levels, and methods to retrieve the root of the tree (root), or the array of leaf nodes (leaves). If you care about the hierarchical structure, you would traverse from the root. If not, you would just use the leaves.\nEach node in the tree can be mapped to rows in the data view. The following sample shows how to traverse the data view for a bar chart above from the x hierarchy:\nasync function logViaHierarchy(dataView)\r{\rconst xHierarchy = await dataView.hierarchy(\u0026quot;X\u0026quot;, true);\rconst root = await xHierarchy.root();\rlog(root, \u0026quot;\u0026quot;);\rfunction log(node, indent) {\rconsole.log(indent + node.name);\rindent += \u0026quot; \u0026quot;;\rif(node.children) {\rnode.children.forEach(node =\u0026gt; log(node, indent));\r} else {\rnode.rows().forEach(row =\u0026gt; console.log(indent + row.continuous(\u0026quot;Y\u0026quot;).value()))\r}\r}\r}\r This would produce the following output (the root has no name):\nApples\rSpain\r2500\rUSA\r13500\rOranges\rSpain\r12000\rUSA\r19000\r Data type mapping Columns and expressions in Spotfire can have a number of different data types. When reading data in JavaScript these types are mapped to corresponding JavaScript types as follows:\n   Spotfire data type JavaScript data type     Integer number   LongInteger number   Real number   SingleReal number   Currency number   Date Date   DateTime Date   Time Custom object Time   TimeSpan Custom objecet TimeSpan   Boolean boolean   String string   Binary Not supported    Note that some types may have a higher precision in Spotfire than can be represented by the native JavaScript types. For instance the JavaScript Date type has a precision of 1 millisecond, while Spotfire internally has a precision of 100 nanoseconds. The numeric data types LongInteger and Currency, as well as the TimeSpan data type, may also suffer from precision loss.\nSpecifying data types for continuous axes Categorical axes basically treat all data types the same way. The data is ordered and its string representation is used. For continuous axes it is possible to specify what data types should be supported. By default, they allow only numeric data. You may also choose to allow additional data types by specifying it in the axis section of the manifest. For instance to support date and time data, you would specify the following:\n\u0026quot;dataTypes\u0026quot;: {\r\u0026quot;allowDateTime\u0026quot;: true,\r\u0026quot;allowNumeric\u0026quot;: true\r}\r In addition to these two flags, there are also flags to turn on support for strings, booleans and time spans.\nUsing the Spotfire color axis Mods can use the same color axis as is used by the native Spotfire visualizations. You do this by specifying a \u0026ldquo;colorAxis\u0026rdquo; entry in the data view definition section of the manifest:\n\u0026quot;dataViewDefinition\u0026quot;: {\r\u0026quot;colorAxis\u0026quot;: {\r\u0026quot;mode\u0026quot;: \u0026quot;dual\u0026quot;\r}\r The \u0026ldquo;mode\u0026rdquo; and other properties for the color axis are specified the same way as for other axes.\nOn the Javascript side you access the data values for the color axis by referring to it by its name, \u0026ldquo;Color\u0026rdquo;. The actual color computed for each row can be retrieved via the color function on a row. It returns an object with the color hexcode.\nUsing multiple measures on continuous axes By default you can only have a single measure on a continuous axis. However Spotfire allows having one axis with multiple measures on it. To turn this on, you set the \u0026ldquo;allowMultipleMeasures\u0026rdquo; flag to true for the axis in the manifest.\nWhen an axis has multiple measures, Spotfire will place each measure on its own row in the data view. This also requires the special \u0026ldquo;(Column Names)\u0026rdquo; expression, [Axis.Default.Names] in the expression language, to be used on a categorical axis in the visualization.\nUsing non-aggregating expressions on a continuous axes Mod data views are always aggregated, and by default the expressions used on them must be aggregating. To enable non-aggregating expressions, you can set the \u0026ldquo;allowNonAggregatingMeasures\u0026rdquo; flag to true for the axis in the manifest. The Spotire UIs will then add a (None) option to the aggregation methods. Note that the data view is still aggregated, so the values on the axes will be used to group by in the aggregation.\nData view sort order By default, the rows in data views are ordered by the categorical axes (or more specifically by the axes that are used to group by when performing the aggregation), in the order in which they are declared. So for instance if you declare a \u0026ldquo;Column\u0026rdquo; axis followed by a \u0026ldquo;Row\u0026rdquo; axis, the data view will first be sorted by the values on the \u0026ldquo;Column\u0026rdquo; axis and then by the \u0026ldquo;Row\u0026rdquo; axis.\nThe color axis is currently always last.\n","excerpt":"Data view definition A mod can create a single aggregated data view.\nThe data view is declared in …","ref":"/spotfire-mods/docs/introduction/mod-data-views/","title":"Mod data views"},{"body":"\rSpotfire Mods is an extension framework that makes it possible to build new interactive visualization types, called visualization mods, and use them in Spotfire like any other visualization.\n\n","excerpt":"Spotfire Mods is an extension framework that makes it possible to build new interactive …","ref":"/spotfire-mods/docs/","title":"Spotfire® Mods Documentation"},{"body":"The API overview aims to provide developers with a hierarchical overview of the Spotfire Mods API. It\u0026rsquo;s an alternative perspective of the API, compared to the more classic API documentation.\nThe visualization is a simplified view of the API. While the Mod API relies heavily on asynchronous behavior via Promises, the visualization only displays the interfaces defined in the spotfire-api.d.ts file. There are some advanced types available in the declaration file that are not displayed in the hierarchy visualization. The advanced types describe some of the more intricate functionality in the API.\n\r\r\r\r ","excerpt":"The API overview aims to provide developers with a hierarchical overview of the Spotfire Mods API. …","ref":"/spotfire-mods/docs/introduction/api-overview/","title":"API overview"},{"body":"\r #td-cover-block-0 { background-image: url(/spotfire-mods/featured-background_huad0dc5ba39a16f530bb51ab1e69b1a4b_2692431_960x540_fill_catmullrom_top_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/spotfire-mods/featured-background_huad0dc5ba39a16f530bb51ab1e69b1a4b_2692431_1920x1080_fill_catmullrom_top_2.png); } }  Spotfire® Mods Getting Started \r\rView on GitHub \r\rCreate custom visualizations in TIBCO Spotfire®\n\n\r       Spotfire Mods by TIBCO Spotfire®\nSpotfire mods makes it quick and easy to create any kind of custom visualization.\n      Getting Started Follow the documentation, and start today!\nHere you find instructions on how to get started developing mods in Spotfire.\nRead more …\n   Tutorials Follow step-by-step guides on how to use the Spotfire Mods API.\nRead more …\n   API Documentation Browse and search the full API documentation.\nRead more …\n \n\r  \r","excerpt":"#td-cover-block-0 { background-image: …","ref":"/spotfire-mods/","title":"Spotfire® Mods"},{"body":"\rfunction resizeIFrameToFitContent( ) {\rlet frame = document.getElementById(\"schema-frame\");\rframe.height = frame.contentWindow.document.body.scrollHeight;\r}\rwindow.addEventListener(\"resize\",resizeIFrameToFitContent);\r ","excerpt":"\rfunction resizeIFrameToFitContent( ) {\rlet frame = document.getElementById(\"schema-frame\"); …","ref":"/spotfire-mods/docs/introduction/mod-schema/","title":"Mod schema"},{"body":"","excerpt":"","ref":"/spotfire-mods/index.json","title":""},{"body":"\r #td-cover-block-0 { background-image: url(/spotfire-mods/about/featured-background_hu30d7ad598a662ec9f4b1f9ea1342f311_12347712_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/spotfire-mods/about/featured-background_hu30d7ad598a662ec9f4b1f9ea1342f311_12347712_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  TIBCO Spotfire® Mods With Spotfire Mods, you can build custom TIBCO Spotfire® analytics apps much faster by integrating JavaScript visualizations, have them look and feel like Spotfire® native visualizations and leverage the built-in capabilities of Spotfire.        More Details can be found here TIBCO Spotfire® Mods Wiki, on      You can now build new visualization types, called visualization mods, and use them in Spotfire like\rany other visualization. A Spotfire visualization mod is a lightweight, shareable, and reusable visualization component that is\rbuilt with web technologies such as JavaScript and HTML and runs in a sandboxed iframe. By connecting to any Spotfire data source and integrating with data science and other built-in Spotfire capabilities, you can create highly customized analytic applications directly within the Spotfire environment.\rDeveloping visualization mods\nDevelopers have access to the Spotfire Mods API, which grants access to the Spotfire data and other\rfunctionality. It is based on TypeScript, which enables syntax highlighting and code completion in the\reditor. You can integrate any third-party JavaScript libraries with your mod to handle the graphics or\rhelp speed up the development.\nUsing visualization mods\nSpotfire visualization mods look, feel, and behave like native Spotfire visualizations, and can be used\rwithout any knowledge of how they were implemented.\rA visualization mod is highly configurable to be reused in different analyses with different data. The\rconfiguration of a mod’s data view and appearance is done with drag-drop or direct manipulation\rwith built-in UIs. The user has access to the standard axis selectors supporting the full Spotfire\rexpression language. Mod-specific settings can be exposed through a popup panel or using a custom\rUI. Standard visualization properties, such as settings for data, appearance, colors, and subsets are\ravailable as well.\rA visualization mod is automatically responsive to events that occur in other parts of Spotfire, for\rexample, filtering, marking, highlighting. Built-in Spotfire capabilities such as actions on marked data,\rexporting to PDF, maximizing the visualization view, creating details visualizations, and changing the\rvisual theme, work as usual.\nSharing and accessing visualization mods\nTo share a mod with others, you can embed it in a Spotfire analysis and share the analysis, or save the\rmod itself to the Spotfire library, where others who have the right permissions can find it by browsing\ror searching for it from the Visualizations flyout. You can also share a separate .mod file via email, file\rshares, or public websites, such as the TIBCO Community. On TIBCO Community Exchange, several\rvisualization mods are available for download.\rSaving visualization mods to the Spotfire library allows users to pin mods to the Visualizations flyout.\rA pinned mod is available to be used in other analyses and the mod will be included as an option\rwhenever you select visualization type. Pinning mods to the visualization flyout can also be centrally\rmanaged. An administrator can specify a collection of mods that the users will have access to. Another\rbenefit of sharing a visualization mod in the Spotfire library is that you will get automatic version\rhandling of the mod. By default, if a visualization mod is re-saved to the Spotfire library, all instances\rof the visualization mod are updated in all analyses, where it is used.\rTo deploy a visualization mod into the Spotfire environment, you can drag and drop a .mod file to\ryour open analysis session. An administrator can deploy and share a mod to a group of users.\nTrust framework for visualization mods\nRunning a mod involves code execution. Therefore, a concept of code trust has been introduced in the\rSpotfire environment. This code trust includes three different options:\na user can trust a specific version of a mod.\ra specific mod can be trusted because it is signed, using cryptographic signatures, by a specific\rSpotfire user.\ra specific mod can be trusted because it is signed by a certificate issued by a trusted certificate\rauthority.\nWhen a mod has been signed, any further changes to the mod code will change the hash sum of the\rmod and there will be a mismatch with what was signed, so any attempts to change the code by a\rthird party should be detectable. See Trusting custom content in the Spotfire environment for more\rinformation about trust in general.\r  \r BSD 3-Clause License \rCopyright © 2020 TIBCO Software Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  Neither the name of TIBCO Software Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT OWNER AND CONTRIBUTORS \u0026ldquo;AS IS\u0026rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\r  \r","excerpt":"#td-cover-block-0 { background-image: …","ref":"/spotfire-mods/about/","title":"About Spotfire Mods"},{"body":"\r\r\r\r\r\r","excerpt":"\r\r\r\r\r\r","ref":"/spotfire-mods/overview/","title":"API Overview"},{"body":"","excerpt":"","ref":"/spotfire-mods/search/","title":"Search Results"}]